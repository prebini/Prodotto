// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Prodotto.EF.Entity;

#nullable disable

namespace Prodotto.EF.Data
{
    public partial class NORTHWINDContext : DbContext
    {
        public NORTHWINDContext()
        {

        }

        public NORTHWINDContext(DbContextOptions<NORTHWINDContext> options)
            : base(options)
        {
            
        }

        public virtual DbSet<AlphabeticalListOfProducts> AlphabeticalListOfProducts { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<CategorySalesFor1997> CategorySalesFor1997 { get; set; }
        public virtual DbSet<Comuni> Comuni { get; set; }
        public virtual DbSet<CurrentProductList> CurrentProductList { get; set; }
        public virtual DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCity { get; set; }
        public virtual DbSet<CustomerCustomerDemo> CustomerCustomerDemo { get; set; }
        public virtual DbSet<CustomerDemographics> CustomerDemographics { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<EmployeeTerritories> EmployeeTerritories { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Invoices> Invoices { get; set; }
        public virtual DbSet<Movimenti> Movimenti { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<OrderDetailsExtended> OrderDetailsExtended { get; set; }
        public virtual DbSet<OrderSubtotals> OrderSubtotals { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OrdersQry> OrdersQry { get; set; }
        public virtual DbSet<ProductSalesFor1997> ProductSalesFor1997 { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrice { get; set; }
        public virtual DbSet<ProductsByCategory> ProductsByCategory { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<QuarterlyOrders> QuarterlyOrders { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<Regioni> Regioni { get; set; }
        public virtual DbSet<RegistriIva> RegistriIva { get; set; }
        public virtual DbSet<SalesByCategory> SalesByCategory { get; set; }
        public virtual DbSet<SalesTotalsByAmount> SalesTotalsByAmount { get; set; }
        public virtual DbSet<Shippers> Shippers { get; set; }
        public virtual DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarter { get; set; }
        public virtual DbSet<SummaryOfSalesByYear> SummaryOfSalesByYear { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<Territories> Territories { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Comuni>(entity =>
            {
                entity.Property(e => e.Comune).IsUnicode(false);
            });

            modelBuilder.Entity<CustomerAndSuppliersByCity>(entity =>
            {
                entity.Property(e => e.Relationship).IsUnicode(false);
            });

            modelBuilder.Entity<CustomerCustomerDemo>(entity =>
            {
                entity.Property(e => e.CustomerId).IsFixedLength(true);

                entity.Property(e => e.CustomerTypeId).IsFixedLength(true);
            });

            modelBuilder.Entity<CustomerDemographics>(entity =>
            {
                entity.Property(e => e.CustomerTypeId).IsFixedLength(true);
            });

            modelBuilder.Entity<Customers>(entity =>
            {
                entity.Property(e => e.CustomerId).IsFixedLength(true);
            });

            modelBuilder.Entity<Invoices>(entity =>
            {
                entity.Property(e => e.CustomerId).IsFixedLength(true);
            });

            modelBuilder.Entity<Movimenti>(entity =>
            {
                entity.Property(e => e.Id).IsFixedLength(true);

                entity.Property(e => e.NumConford).IsFixedLength(true);

                entity.Property(e => e.NumDdt).IsFixedLength(true);

                entity.Property(e => e.NumFat).IsFixedLength(true);
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.Property(e => e.OrderId).ValueGeneratedNever();

                entity.Property(e => e.CustomerId).IsFixedLength(true);
            });

            modelBuilder.Entity<OrdersQry>(entity =>
            {
                entity.Property(e => e.CustomerId).IsFixedLength(true);
            });

            modelBuilder.Entity<Province>(entity =>
            {
                entity.Property(e => e.Sigla).IsUnicode(false);
            });

            modelBuilder.Entity<QuarterlyOrders>(entity =>
            {
                entity.Property(e => e.CustomerId).IsFixedLength(true);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.Property(e => e.RegionDescription).IsFixedLength(true);
            });

            modelBuilder.Entity<RegistriIva>(entity =>
            {
                entity.Property(e => e.Descrizione).IsUnicode(false);

                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<Territories>(entity =>
            {
                entity.Property(e => e.TerritoryDescription).IsFixedLength(true);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}